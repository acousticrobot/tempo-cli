#!/usr/bin/env ruby

# In development, you need to use `bundle exec bin/tempo` to run this app
require 'gli'
require 'tempo'

include GLI::App

# to preserve all the args in ARGV:
# preserve_argv

# used to store an alternate directory path:
config_file '.tempo.yaml'

program_desc 'Command line time tracking by project

For more help on any command, run: tempo [command] --help
'

version Tempo::VERSION

# == GLOBAL OPTIONS ==

desc 'verbose output'
long_desc 'include verbose reporting in the command output'
switch [:v, :verbose]

desc 'output id'
long_desc 'include id reporting in the command output'
switch [:i, :id]

desc 'directory'
long_desc 'location of the tempo directory'
default_value ENV['HOME']
flag [:d,:directory]

# desc 'Describe some flag here'
# default_value 'the default'
# arg_name 'The name of the argument'
# flag [:f,:flagname]

# COMMAND: PROJECT

desc 'Manage the Projects that timed tasks are assigned to'
long_desc "Manage the Projects that timed tasks are assigned to.

By default, lists the current project, or with --list tag, lists all projects.
The active project will be marked by an asterisk. If supplied with arguments and no command options,
a new project will be added.

Arguments supplied to --list, --delete, and --[un]tag
will use fuzzy matching unless you:

 - Use the --exact flag to match the arguments exactly

 - Use the --id tag to match by id

examples:

# list current project

$ tempo project

# list all projects

$ tempo project --list

# adding a new project titled 'star gazing'

$ tempo project star gazing

# adding a new project with a tag

$ tempo project --add star gazing --tag cellar

# untagging and tagging an existing project

$ tempo project star gazing --untag cellar --tag stellar"

arg_name '"name of the project"'
command [:project, :p] do |c|

  c.desc 'Add a Project'
  c.long_desc "Add a Project (default command behavior). When used with --tag adds a new project with the given tag"
  c.switch [:a, :add], negatable: false

  c.desc 'List Projects'
  c.long_desc "Lists all projects that match the supplied argument"
  c.switch [:l, :list], negatable: false

  c.desc 'Exact Match'
  c.long_desc "Match project with an exact title"
  c.switch [:e, :exact]

  c.desc 'List by or perform command by project id'
  c.long_desc 'show IDs in output or perform command by matching to id'
  c.switch [:i, :id], negatable: false

  c.desc 'Delete a Project'
  c.default_value nil
  c.arg_name 'title'
  c.flag [:d, :delete]

  c.desc 'Tag a Project'
  c.long_desc "Tag a project with one-word tags. Pass multiple tags in quotes to add multiple tags"
  c.default_value nil
  c.arg_name 'tagword'
  c.flag [:t, :tag]

  c.desc 'Untag a Project'
  c.default_value nil
  c.arg_name 'tagword'
  c.flag [:u, :untag]

  c.desc 'Add a Project as a child of the current Project'
  c.switch [:c, :child], negatable: false

  c.action do |global_options, options, args|

    controller = Tempo::Controllers::Projects

    # tag a project
    #
    if options[:tag]
      controller.tag options, args

    # untag a project
    #
    elsif options[:untag]
      controller.tag options, args

    # delete a project
    #
    elsif options[:delete]
      controller.delete options, args

    # add a project
    #
    elsif !options[:list] && !args.empty?
      controller.add options, args

    elsif !options[:list] && args.empty?
      controller.show_active

    # list projects, fiter by args
    #
    else
      controller.index options, args
    end
  end
end

# COMMAND: CHECKOUT

desc 'Checkout a project to track time against'
long_desc "Checkout the Projects that timed tasks are assigned to.

Arguments supplied will use fuzzy matching unless you:

 - Use the --exact flag to match the arguments exactly

 - Use the --id tag to match by id

examples:

# checking out an existing project titled 'star gazing'

$ tempo checkout star gazing

# adding and checking out a new project titled 'star gazing'

$ tempo checkout -a star gazing"

arg_name '"name of the project"'
command [:checkout, :c] do |c|

  c.desc 'Add and Checkout a new project'
  c.arg_name 'title'
  c.flag [:a, :add]

  c.desc 'use an exact match for project title'
  c.switch [:e, :exact]

  c.desc 'checkout by project id'
  c.switch [:i, :id], negatable: false

  c.action do |global_options,options,args|

    controller = Tempo::Controllers::Checkout

    # add and checkout a project
    #
    if options[:add]
      controller.add_project options, args

    # checkout existing project
    else
      if args.empty?
        controller.assistance
      else
        controller.existing_project options, args
      end
    end
  end
end


# COMMAND: ARRANGE

desc 'Arrange project hierarchy'
long_desc "Arrange projects into a parent/child hierarchy

New projects are added as root projects by default.

Use arrange to arrange existing projects as child or root projects.

If you want to add a new project that is a child of the existing project,

use the --child flag with the project command instead:

$ `tempo project --child 'my new project'

Arguments supplied will use fuzzy matching unless you:

 - Use the --exact flag to match the arguments exactly

 - Use the --id tag to match by id

examples:

# Arrange an existing project as a root project

$ tempo arrange : aquascaping

# Arrange an existing project as a child project

$ tempo arrange aquascaping : coral pruning"

arg_name '[parent project] : child project'
command [:arrange, :a] do |c|

  c.desc 'use an exact match for project title'
  c.switch [:e, :exact]

  c.desc 'checkout by project id'
  c.switch [:i, :id]

  c.action do |global_options, options, args|
    controller = Tempo::Controllers::Arrange
    controller.parse options, args
  end
end

# COMMAND: EDIT

# COMMAND: START

desc 'Start a time entry'
long_desc "Starts a new time entry, and closes out any running time entries.

You can also add a description of the time entry.

To start a time entry at a time other than the current, pass it in as an argument
to the --at flag.  This will accept a number of human readable formats, multiple
word time formats should be enclosed in quotes.

Use the --resume flag to start a new time entry with the last used project and description.

To reopen the last time entry (change the end time back to 'running') see `tempo update --running`

examples:

# start a new time record at the current time with no description

$ tempo start

# start and end a previous time record with a description

$ tempo start learning how to do the Hustle --at 'yesterday at 8:00 in the evening' --end 'yesterday at 11:59pm'
"

arg_name 'description'
command [:start, :s] do |c|

  c.desc 'start an entry using the last description and project'
  c.switch [:r, :resume], negatable: false

  c.desc 'end the entry at a given time'
  c.arg_name 'time'
  c.flag [:e, :end]

  c.desc 'start the entry at a given time'
  c.arg_name 'time'
  c.flag [:a, :at]

  c.action do |global_options, options, args|
    controller = Tempo::Controllers::Start

    controller.start_timer options, args
  end
end

# COMMAND: END

desc 'End a time entry'
long_desc "Closes out any running time entries.

You can optionally add a description of the time entry, which will overwrite the current description.

To end a time entry at a time other than the current, pass it in as an argument
to the --at flag.  This will accept a number of human readable formats, multiple
word time formats should be enclosed in quotes.

examples:

# creating an entry at 4:55pm, then ending it 5 minutes later and changing the description

$ tempo start --at 16:55 practicing the human torch trick

$ tempo end --at 'today at 5:00pm' learning how to stop, drop, and roll
"


arg_name 'time out, defaults to now'
command [:end, :e] do |c|

  c.desc 'time'
  c.arg_name 'end the current time entry at the given time'
  c.flag [:a, :at]

  c.action do |global_options, options, args|
    controller = Tempo::Controllers::End

    controller.end_timer options, args
  end
end

# COMMAND: REPORT

desc 'Report time entries'
long_desc "Reports time entries for a day or a period of days.

By default, lists the last recorded day's entries.

To list a different day, supply a day as the args

To list a series of records, include a --from and --to value

examples:

# report current day's entries

$ tempo report

# report a different day

$ tempo report 11/24/14

# report the past week

$ tempo report -f 'a week ago'

# report a period of days

$ tempo report -f 'last monday' -t 'last friday'"

arg_name '[day]'
command [:report, :r] do |c|

  c.desc 'begin time records on this date'
  c.arg_name 'time'
  c.default_value 'last record'
  c.flag [:f, :from]

  c.desc 'end time records on this date'
  c.arg_name 'time'
  c.default_value 'today'
  c.flag [:t, :to]

  c.action do |global_options, options, args|
    controller = Tempo::Controllers::Report

    controller.report options, args
  end
end

# COMMAND: UPDATE

desc 'update a time entry'
long_desc "update the project, start time, or end time for a time
entry.

Defaults to the current time entry, or most recently completed time entry
if none are running.  Optionally, you can supply an id for a time entry on the current
day, or a day and id to update previous time entries.

The description, if passed in, will be used to replace the existing description. You can
also change the start or end time, or delete the entire time entry.

examples:

# update description for the last time entry

$ tempo update practicing banjo

# update the description for yesterday's entry with id of 2

$ tempo update --id 2 --on 'yesterday' practicing banjo

# update the start time for the last time entry

$ tempo update --start 7:00

# update the end time and description

$ tempo update --end '8:00pm' practicing banjo

# delete the last time entry

$ tempo update --delete

# update the description, start, and end time for a previous day's entry

$ tempo update --on 1/17/14 --start \"1/17/14 8am\" --end \"1/17/14 10am\" practicing banjo
"

arg_name '[description]'
command [:update, :u] do |c|

  c.desc 'Select by Id'
  c.arg_name 'number'
  c.flag [:i, :id]

  c.desc 'Select On Date'
  c.arg_name 'date'
  c.flag [:o, :on]

  c.desc 'Update to the active project'
  c.switch [:p, :project], negatable: false

  c.desc 'Update the Start Time'
  c.arg_name 'time'
  c.flag [:s, :start]

  c.desc 'Change the last time entry back to actively running (ignores all other options)'
  c.switch [:r, :running], negatable: false

  c.desc 'Update the End Time'
  c.arg_name 'time'
  c.flag [:e, :end]

  c.desc 'Delete a Time Entry'
  c.switch [:d, :delete], negatable: false

  c.action do |global_options, options, args|
    controller = Tempo::Controllers::Update

    controller.parse options, args
  end
end

# COMMAND: CLEAN

desc 'Clean the tempo file structure'
long_desc "Creates a backup of the existing tempo directory,
and then clean all files in the current directory.

Cleaning the projects assures that:

1. All projects that have been renamed have been updated in the files.

2. Any files with time record conflicts are caught and can be corrected."

command [:clean] do |c|

  c.action do |global_options, options, args|
    controller = Tempo::Controllers::Records

    # controller.backup_records options, args

    controller.clean_records options, args
  end
end


pre do |global,command,options,args|

  # add reporting of all arguments
  if global[:v]
    Tempo::Views::options_report command.name, global, options, args
  end

  Tempo::Views::initialize_view_options command.name, global, options

  # pass a custom directory into options
  if global[:directory] != ENV['HOME']
    options[:directory] = File.join(ENV['HOME'], global[:directory])
  end

  # Load the stored records
  Tempo::Controllers::Records.initialize_from_records options, args

  # TODO: send formats in through global options, and then:
  # Tempo::Views::Reporter.add_formats

  # Return true to proceed; false to abort
  true
end

post do |global,command,options,args|

  Tempo::Views::Reporter.report

end

on_error do |exception|

  # run DEBUG=true tempo ... to see verbose exceptions
  puts exception.backtrace if ENV['DEBUG'] == "true"

  # return false to skip default error handling
  true
end

exit run(ARGV)
